class NhanVien:
    def __init__(self, ma_nv, ho_ten, luong):
        self.ma_nv = ma_nv
        self.ho_ten = ho_ten
        self.luong = luong

    def get_thu_nhap(self):
        return self.luong

    def __str__(self):
        return f"{self.ma_nv:<10} | {self.ho_ten:<25} | {self.luong:>10,.0f}"


class TiepThi(NhanVien):
    def __init__(self, ma_nv, ho_ten, luong, doanh_so, hoa_hong):
        super().__init__(ma_nv, ho_ten, luong)
        self.doanh_so = doanh_so
        self.hoa_hong = hoa_hong

    def get_thu_nhap(self):
        return self.luong + self.doanh_so * self.hoa_hong


class TruongPhong(NhanVien):
    def __init__(self, ma_nv, ho_ten, luong, phu_cap):
        super().__init__(ma_nv, ho_ten, luong)
        self.phu_cap = phu_cap

    def get_thu_nhap(self):
        return self.luong + self.phu_cap


class QuanLyNhanVien:
    def __init__(self):
        self.ds_nv = []

   
    def nhap_danh_sach(self):
        while True:
            print("\n1. Nh√¢n vi√™n h√†nh ch√≠nh")
            print("2. Nh√¢n vi√™n ti·∫øp th·ªã")
            print("3. Tr∆∞·ªüng ph√≤ng")
            print("0. Tho√°t nh·∫≠p")
            chon = input("Ch·ªçn lo·∫°i nh√¢n vi√™n: ")

            if chon == "0":
                break

            ma_nv = input("M√£ NV: ")
            ho_ten = input("H·ªç t√™n: ")
            luong = float(input("L∆∞∆°ng: "))

            if chon == "1":
                nv = NhanVien(ma_nv, ho_ten, luong)
            elif chon == "2":
                doanh_so = float(input("Doanh s·ªë: "))
                hoa_hong = float(input("Hoa h·ªìng (vd 0.05): "))
                nv = TiepThi(ma_nv, ho_ten, luong, doanh_so, hoa_hong)
            elif chon == "3":
                phu_cap = float(input("Ph·ª• c·∫•p: "))
                nv = TruongPhong(ma_nv, ho_ten, luong, phu_cap)
            else:
                print("Lo·∫°i kh√¥ng h·ª£p l·ªá!")
                continue

            self.ds_nv.append(nv)
            print(" ƒê√£ th√™m:", ho_ten)

    def hien_thi_danh_sach(self):
        print(f"\n{'M√£ NV':<10} | {'H·ªç t√™n':<25} | {'Thu nh·∫≠p':>10}")
        print("-" * 50)
        for nv in self.ds_nv:
            print(f"{nv.ma_nv:<10} | {nv.ho_ten:<25} | {nv.get_thu_nhap():>10,.0f}")

    
    def tim_theo_ma(self):
        ma = input("Nh·∫≠p m√£ NV c·∫ßn t√¨m: ")
        for nv in self.ds_nv:
            if nv.ma_nv == ma:
                print(" Th√¥ng tin:", nv)
                return
        print(" Kh√¥ng t√¨m th·∫•y!")

    
    def xoa_nhan_vien(self):
        ma = input("Nh·∫≠p m√£ NV c·∫ßn x√≥a: ")
        for nv in self.ds_nv:
            if nv.ma_nv == ma:
                self.ds_nv.remove(nv)
                print("üóëÔ∏è ƒê√£ x√≥a nh√¢n vi√™n:", ma)
                return
        print(" Kh√¥ng t√¨m th·∫•y m√£ nh√¢n vi√™n!")

   
    def sap_xep_theo_ten(self):
        self.ds_nv.sort(key=lambda nv: nv.ho_ten.split()[-1])
        print(" ƒê√£ s·∫Øp x·∫øp theo t√™n.")
        self.hien_thi_danh_sach()

   
    def sap_xep_theo_thu_nhap(self):
        self.ds_nv.sort(key=lambda nv: nv.get_thu_nhap(), reverse=True)
        print(" ƒê√£ s·∫Øp x·∫øp theo thu nh·∫≠p.")
        self.hien_thi_danh_sach()